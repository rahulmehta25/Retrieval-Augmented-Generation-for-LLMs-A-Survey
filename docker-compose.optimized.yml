version: '3.9'

services:
  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: rag-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # PostgreSQL with pgvector
  postgres:
    image: pgvector/pgvector:pg16
    container_name: rag-postgres
    environment:
      POSTGRES_USER: rag_user
      POSTGRES_PASSWORD: rag_password
      POSTGRES_DB: rag_db
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - rag-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rag_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # RAG API Server 1
  rag-api-1:
    build:
      context: ./rag-from-scratch
      dockerfile: Dockerfile.optimized
    container_name: rag-api-1
    environment:
      - PORT=8090
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - WORKERS=4
      - PYTHONUNBUFFERED=1
      - ENABLE_CACHE=true
      - ENABLE_MONITORING=true
    ports:
      - "8090:8090"
    volumes:
      - ./rag-from-scratch:/app
      - ./uploaded_documents:/app/uploaded_documents
      - ./chroma_db:/app/chroma_db
    depends_on:
      - redis
      - postgres
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # RAG API Server 2
  rag-api-2:
    build:
      context: ./rag-from-scratch
      dockerfile: Dockerfile.optimized
    container_name: rag-api-2
    environment:
      - PORT=8091
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - WORKERS=4
      - PYTHONUNBUFFERED=1
      - ENABLE_CACHE=true
      - ENABLE_MONITORING=true
    ports:
      - "8091:8091"
    volumes:
      - ./rag-from-scratch:/app
      - ./uploaded_documents:/app/uploaded_documents
      - ./chroma_db:/app/chroma_db
    depends_on:
      - redis
      - postgres
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8091/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # RAG API Server 3
  rag-api-3:
    build:
      context: ./rag-from-scratch
      dockerfile: Dockerfile.optimized
    container_name: rag-api-3
    environment:
      - PORT=8092
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - WORKERS=4
      - PYTHONUNBUFFERED=1
      - ENABLE_CACHE=true
      - ENABLE_MONITORING=true
    ports:
      - "8092:8092"
    volumes:
      - ./rag-from-scratch:/app
      - ./uploaded_documents:/app/uploaded_documents
      - ./chroma_db:/app/chroma_db
    depends_on:
      - redis
      - postgres
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8092/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # Frontend application
  frontend:
    build:
      context: ./glass-scroll-scribe
      dockerfile: Dockerfile.optimized
    container_name: rag-frontend
    ports:
      - "3000:80"
    volumes:
      - ./glass-scroll-scribe/dist:/usr/share/nginx/html
    depends_on:
      - nginx
    networks:
      - rag-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # NGINX Load Balancer
  nginx:
    image: nginx:alpine
    container_name: rag-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
      - ./glass-scroll-scribe/dist:/var/www/rag-frontend/dist:ro
    depends_on:
      - rag-api-1
      - rag-api-2
      - rag-api-3
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: rag-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - rag-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: rag-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - rag-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: rag-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Collector HTTP
      - "14250:14250"  # Collector gRPC
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - rag-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # Ollama for LLM (if using local models)
  ollama:
    image: ollama/ollama:latest
    container_name: rag-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    networks:
      - rag-network
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    # Uncomment for GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

networks:
  rag-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
  postgres-data:
  nginx-cache:
  prometheus-data:
  grafana-data:
  ollama-data: