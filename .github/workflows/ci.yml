name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.11"

jobs:
  # Backend Python CI
  backend-ci:
    name: Backend CI (Python)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
    
    defaults:
      run:
        working-directory: ./rag-from-scratch
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov black flake8 mypy bandit safety

      - name: Code formatting check
        run: |
          black --check --diff src/ tests/
          
      - name: Linting
        run: |
          flake8 src/ tests/ --max-line-length=100 --ignore=E203,W503

      - name: Type checking
        run: |
          mypy src/ --ignore-missing-imports

      - name: Security scan - Bandit
        run: |
          bandit -r src/ -f json -o bandit-report.json
          
      - name: Security scan - Safety
        run: |
          safety check --json --output safety-report.json
          
      - name: Run tests with coverage
        run: |
          pytest tests/ --cov=src --cov-report=xml --cov-report=html --cov-report=term
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./rag-from-scratch/coverage.xml
          flags: backend
          name: backend-coverage

      - name: Archive test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results-${{ matrix.python-version }}
          path: |
            ./rag-from-scratch/htmlcov/
            ./rag-from-scratch/bandit-report.json
            ./rag-from-scratch/safety-report.json

  # Frontend React CI
  frontend-ci:
    name: Frontend CI (React)
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./glass-scroll-scribe
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./glass-scroll-scribe/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Lint check
        run: npm run lint

      - name: Type check
        run: npx tsc --noEmit

      - name: Build application
        run: npm run build

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ./glass-scroll-scribe/dist/

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci]
    
    services:
      # ChromaDB for testing
      chroma:
        image: chromadb/chroma:latest
        ports:
          - 8000:8000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        working-directory: ./rag-from-scratch
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-integration

      - name: Wait for ChromaDB
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:8000/api/v1/heartbeat; do sleep 2; done'

      - name: Run integration tests
        working-directory: ./rag-from-scratch
        run: |
          pytest tests/test_integration.py -v --tb=short
        env:
          CHROMA_HOST: localhost
          CHROMA_PORT: 8000

  # Security scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: SAST with CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python, javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Build validation
  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./rag-from-scratch
          file: ./rag-from-scratch/Dockerfile
          push: false
          tags: rag-backend:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./glass-scroll-scribe
          file: ./glass-scroll-scribe/Dockerfile
          push: false
          tags: rag-frontend:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Notification on failure
  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci, integration-tests, security-scan, build-validation]
    if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: 'CI Pipeline failed on main branch'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}