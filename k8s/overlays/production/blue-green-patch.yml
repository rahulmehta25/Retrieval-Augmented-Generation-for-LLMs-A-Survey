# Blue-Green Deployment Services for Production

# Active service (points to current live deployment)
apiVersion: v1
kind: Service
metadata:
  name: rag-app-active
  namespace: rag-prod
  labels:
    app.kubernetes.io/name: rag-system
    app.kubernetes.io/component: active-service
    deployment-type: blue-green
    environment: production
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:region:account:certificate/cert-id"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-timeout: "300"
spec:
  type: LoadBalancer
  loadBalancerSourceRanges:
  - 0.0.0.0/0  # Restrict as needed for security
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
  ports:
  - port: 443
    targetPort: 3000
    protocol: TCP
    name: https
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  - port: 8443
    targetPort: 8000
    protocol: TCP
    name: api-https
  selector:
    app: rag-frontend
    color: blue  # Default to blue, will be switched during deployment

---
# Canary service (for gradual traffic shifting)
apiVersion: v1
kind: Service
metadata:
  name: rag-app-canary
  namespace: rag-prod
  labels:
    app.kubernetes.io/name: rag-system
    app.kubernetes.io/component: canary-service
    deployment-type: blue-green
    environment: production
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  - port: 8080
    targetPort: 8000
    protocol: TCP
    name: api
  selector:
    app: rag-frontend
    color: green  # Points to the candidate deployment

---
# Blue backend service
apiVersion: v1
kind: Service
metadata:
  name: rag-backend-blue
  namespace: rag-prod
  labels:
    app.kubernetes.io/name: rag-backend
    app.kubernetes.io/component: blue-service
    color: blue
    environment: production
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: rag-backend
    color: blue

---
# Green backend service
apiVersion: v1
kind: Service
metadata:
  name: rag-backend-green
  namespace: rag-prod
  labels:
    app.kubernetes.io/name: rag-backend
    app.kubernetes.io/component: green-service
    color: green
    environment: production
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: rag-backend
    color: green

---
# Blue frontend service
apiVersion: v1
kind: Service
metadata:
  name: rag-frontend-blue
  namespace: rag-prod
  labels:
    app.kubernetes.io/name: rag-frontend
    app.kubernetes.io/component: blue-service
    color: blue
    environment: production
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: rag-frontend
    color: blue

---
# Green frontend service
apiVersion: v1
kind: Service
metadata:
  name: rag-frontend-green
  namespace: rag-prod
  labels:
    app.kubernetes.io/name: rag-frontend
    app.kubernetes.io/component: green-service
    color: green
    environment: production
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: rag-frontend
    color: green

---
# Production Ingress with advanced configuration
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rag-production-ingress
  namespace: rag-prod
  labels:
    app.kubernetes.io/name: rag-system
    app.kubernetes.io/component: ingress
    environment: production
  annotations:
    # Basic ingress settings
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # SSL/TLS settings
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-RSA-AES128-GCM-SHA256,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-RSA-AES128-SHA,ECDHE-RSA-AES256-SHA,ECDHE-RSA-AES128-SHA256,ECDHE-RSA-AES256-SHA384"
    
    # Performance settings
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-buffering: "on"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"
    
    # Rate limiting (production-grade)
    nginx.ingress.kubernetes.io/rate-limit: "200"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "10"
    
    # Security headers (comprehensive)
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
      add_header X-Frame-Options "DENY" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https://www.google-analytics.com https://www.googletagmanager.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: https: www.google-analytics.com; font-src 'self' data: https://fonts.gstatic.com; connect-src 'self' https: wss:; frame-ancestors 'none';" always;
      add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), gyroscope=(), accelerometer=()" always;
      add_header X-Deployment-Color $upstream_addr always;
    
    # Load balancing
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr consistent"
    nginx.ingress.kubernetes.io/load-balance: "ewma"
    
    # CORS (production-specific)
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://rag.your-domain.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-max-age: "86400"
    
    # Certificate management
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    cert-manager.io/acme-challenge-type: "http01"
    
    # WAF integration (if available)
    nginx.ingress.kubernetes.io/modsecurity: "true"
    nginx.ingress.kubernetes.io/modsecurity-snippet: |
      SecRuleEngine On
      SecRequestBodyAccess On
      SecRule REQUEST_HEADERS:Content-Type "text/xml" "id:200001,phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML"
      
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - rag.your-domain.com
    - api.rag.your-domain.com
    secretName: rag-production-tls-cert
  rules:
  # Frontend
  - host: rag.your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: rag-app-active
            port:
              number: 80
  # Backend API
  - host: api.rag.your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: rag-app-active
            port:
              number: 8080

---
# Redis deployment for production caching
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: rag-prod
  labels:
    app: redis
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
    environment: production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: cache
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis/redis.conf
          subPath: redis.conf
        - name: redis-data
          mountPath: /data
        command:
        - redis-server
        - /etc/redis/redis.conf
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
      - name: redis-data
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: rag-prod
  labels:
    app: redis
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: redis
  selector:
    app: redis