apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rag-ingress
  namespace: rag-system
  labels:
    app.kubernetes.io/name: rag-system
    app.kubernetes.io/component: ingress
  annotations:
    # NGINX Ingress Controller annotations
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
      add_header X-Frame-Options "DENY" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; frame-ancestors 'none';" always;
    
    # Load balancing
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    
    # CORS (if needed)
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://rag.your-domain.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    
    # Certificate management (cert-manager)
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - rag.your-domain.com
    - api.rag.your-domain.com
    secretName: rag-tls-cert
  rules:
  # Frontend
  - host: rag.your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: rag-frontend-service
            port:
              number: 80
  # Backend API
  - host: api.rag.your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: rag-backend-service
            port:
              number: 8000

---
# Alternative ingress for internal services (monitoring, admin)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rag-internal-ingress
  namespace: rag-system
  labels:
    app.kubernetes.io/name: rag-system
    app.kubernetes.io/component: internal-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: basic-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - RAG Admin'
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - admin.rag.your-domain.com
    secretName: rag-admin-tls-cert
  rules:
  - host: admin.rag.your-domain.com
    http:
      paths:
      # Admin endpoints
      - path: /admin
        pathType: Prefix
        backend:
          service:
            name: rag-backend-service
            port:
              number: 8000
      # Monitoring endpoints
      - path: /metrics
        pathType: Prefix
        backend:
          service:
            name: rag-backend-service
            port:
              number: 8000

---
# Basic auth secret for admin access
apiVersion: v1
kind: Secret
metadata:
  name: basic-auth
  namespace: rag-system
  labels:
    app.kubernetes.io/name: rag-system
    app.kubernetes.io/component: auth
type: Opaque
data:
  # Create with: htpasswd -c auth admin
  # Then: kubectl create secret generic basic-auth --from-file=auth
  auth: YWRtaW46JGFwcjEkZ0c3ZVouTCQkRjhmdXUvVTVnZ3d0Zk1lOTAK  # admin:admin (change this!)